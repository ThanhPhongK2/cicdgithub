name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # --------------------------
  # Lint backend (Static Code Analysis)
  # --------------------------
  lint-backend:
    name: Lint (Backend)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: Server/node_modules
          key: backend-${{ hashFiles('Server/package-lock.json', 'Server/package.json') }}
      - uses: actions/setup-node@v3
        with:
          node-version: '20'
      - run: cd Server && npm install
      - run: cd Server && npm run lint -- --ext .js --max-warnings=0

  # --------------------------
  # Lint frontend (Static Code Analysis)
  # --------------------------
  lint-frontend:
    name: Lint (Frontend)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: client/node_modules
          key: frontend-${{ hashFiles('client/package-lock.json', 'client/package.json') }}
      - uses: actions/setup-node@v3
        with:
          node-version: '20'
      - run: cd client && npm install
      - run: cd client && npm run lint -- --ext .js,.jsx --max-warnings=0

  # --------------------------
  # Lint Python (Server/python-app)
  # --------------------------
  lint-python:
    name: Lint (Python)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - run: python -m pip install --upgrade pip
      - run: pip install -r Server/app/requirements.txt
      - run: flake8 Server/app

  # --------------------------
  # Test backend (Unit Test)
  # --------------------------
  test-backend:
    name: Test (Backend)
    runs-on: ubuntu-latest
    needs: lint-backend
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: Server/node_modules
          key: backend-${{ hashFiles('Server/package-lock.json', 'Server/package.json') }}
      - uses: actions/setup-node@v3
        with:
          node-version: '20'
      - run: cd Server && npm install
      - run: cd Server && npm test

  # --------------------------
  # Test frontend (Unit Test)
  # --------------------------
  test-frontend:
    name: Test (Frontend)
    runs-on: ubuntu-latest
    needs: lint-frontend
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: client/node_modules
          key: frontend-${{ hashFiles('client/package-lock.json', 'client/package.json') }}
      - uses: actions/setup-node@v3
        with:
          node-version: '20'
      - run: cd client && npm install
      - run: cd client && npm test -- --watchAll=false

  # --------------------------
  # Test Python
  # --------------------------
  test-python:
    name: Test (Python)
    runs-on: ubuntu-latest
    needs: lint-python
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - run: pip install -r Server/app/requirements.txt
      - run: pytest Server/app/tests

  # --------------------------
  # Build frontend
  # --------------------------
  build-frontend:
    name: Build (Frontend)
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: client/node_modules
          key: frontend-${{ hashFiles('client/package-lock.json', 'client/package.json') }}
      - uses: actions/setup-node@v3
        with:
          node-version: '20'
      - run: cd client && npm install && npm run build

  # --------------------------
  # Build & Push Docker Images
  # --------------------------
  build-and-deploy:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: build-frontend
    steps:
      - uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

        # Build + Scan + Push Frontend
      - name: Build frontend image
        run: |
            cd client
            IMAGE_NAME=${{ secrets.DOCKER_USERNAME }}/frontend
            docker build -t $IMAGE_NAME:latest -t $IMAGE_NAME:${{ github.sha }} .
      - name: Scan frontend image
        uses: aquasecurity/trivy-action@master
        with:
            image-ref: ${{ secrets.DOCKER_USERNAME }}/frontend:latest
            severity: CRITICAL,HIGH
            exit-code: 1
      - run: |
            IMAGE_NAME=${{ secrets.DOCKER_USERNAME }}/frontend
            docker push $IMAGE_NAME:latest
            docker push $IMAGE_NAME:${{ github.sha }}

        # Build + Scan + Push Backend
      - name: Build backend image
        run: |
            cd Server
            IMAGE_NAME=${{ secrets.DOCKER_USERNAME }}/backend
            docker build -t $IMAGE_NAME:latest -t $IMAGE_NAME:${{ github.sha }} .
      - name: Scan backend image
        uses: aquasecurity/trivy-action@master
        with:
            image-ref: ${{ secrets.DOCKER_USERNAME }}/backend:latest
            severity: CRITICAL,HIGH
            exit-code: 0
      - run: |
            IMAGE_NAME=${{ secrets.DOCKER_USERNAME }}/backend
            docker push $IMAGE_NAME:latest
            docker push $IMAGE_NAME:${{ github.sha }}

  # --------------------------
  # Deploy on EC2
  # --------------------------
  deploy:
    name: Deploy on EC2
    runs-on: self-hosted
    needs: build-and-deploy
    steps:
      - name: Create .env file
        run: |
          cd /home/ubuntu/actions-runner/_work/cicdgithub
          echo "${{ secrets.PROD_BACKEND_ENV }}" > Server/.env
          echo "${{ secrets.PROD_FRONTEND_ENV }}" > client/.env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> Server/.env
          echo "MONGO_DB=${{ secrets.MONGO_DB }}" >> Server/.env
          
      - name: Deploy Docker containers
        env:
          GITHUB_SHA: ${{ github.sha }} 
        run: |
          cd /home/ubuntu/actions-runner/_work/cicdgithub
          sudo docker-compose down --remove-orphans
          export GITHUB_SHA=${GITHUB_SHA}
          sudo docker-compose pull
          sudo docker-compose up -d --force-recreate
          sudo docker image prune -f --filter "dangling=true"
