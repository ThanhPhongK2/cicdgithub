name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint:
    name: Lint (Backend)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: Server/node_modules
          key: backend-${{ hashFiles('Server/package-lock.json',  'Server/package.json') }}
      - uses: actions/setup-node@v3
        with:
          node-version: '20'
      - run: cd Server && npm install
      - run: cd Server && npm run lint -- --ext .js --max-warnings=0

  test:
    name: Test (Backend)
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: Server/node_modules
          key: backend-${{ hashFiles('Server/package-lock.json', 'Server/package.json') }}
      - uses: actions/setup-node@v3
        with:
          node-version: '20'
      - run: cd Server && npm install
      - run: cd Server && npm test

  build:
    name: Build (Frontend)
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: client/node_modules
          key: frontend-${{ hashFiles('client/package-lock.json') }}
      - uses: actions/setup-node@v3
        with:
          node-version: '20'
      - run: cd client && npm install && npm run build

  build-and-deploy:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Free disk space
        run: |
          docker system prune -af --volumes
          sudo rm -rf /var/lib/apt/lists/*
          sudo apt-get clean
          sudo journalctl --vacuum-time=1d

      - uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Clean old Docker resources
        run: |
          sudo docker system prune -af --volumes
          sudo docker container prune -f
          sudo docker image prune -af
          sudo docker volume prune -f
          sudo docker network prune -f

      - name: Build frontend image
        run: |
          cd client
          IMAGE_NAME=${{ secrets.DOCKER_USERNAME }}/frontend
          docker build -t $IMAGE_NAME:latest -t $IMAGE_NAME:${{ github.sha }} .
          docker push $IMAGE_NAME:latest
          docker push $IMAGE_NAME:${{ github.sha }}

      - name: Build backend image
        run: |
          cd Server
          IMAGE_NAME=${{ secrets.DOCKER_USERNAME }}/backend
          docker build -t $IMAGE_NAME:latest -t $IMAGE_NAME:${{ github.sha }} .
          docker push $IMAGE_NAME:latest
          docker push $IMAGE_NAME:${{ github.sha }}

  deploy:
    name: Deploy on EC2
    runs-on: self-hosted
    needs: build-and-deploy
    steps:
      - name: Set env
        run: echo "GITHUB_SHA=${{ github.sha }}" >> $GITHUB_ENV

      - name: Deploy Docker containers
        run: |
          cd /home/ubuntu/actions-runner/_work/cicdgithub

          echo "Stopping old containers..."
          sudo docker-compose down --remove-orphans

          echo "Pulling new images with tag ${GITHUB_SHA}..."
          sudo docker-compose pull

          echo "Starting new containers..."
          sudo docker-compose up -d --force-recreate

          echo "Cleaning dangling images..."
          sudo docker image prune -f --filter "dangling=true"