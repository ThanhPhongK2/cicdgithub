name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint:
    name: Lint (Backend)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: Server/node_modules
          key: backend-${{ hashFiles('Server/package-lock.json') }}
      - uses: actions/setup-node@v3
        with:
          node-version: '20'
      - run: cd Server && npm install
      - run: cd Server && npm run lint -- --ext .js --max-warnings=0

  test:
    name: Test (Backend)
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: Server/node_modules
          key: backend-${{ hashFiles('Server/package-lock.json') }}
      - uses: actions/setup-node@v3
        with:
          node-version: '20'
      - run: cd Server && npm install
      - run: cd Server && npm test -- --coverage --detectOpenHandles
        env:
          NODE_OPTIONS: --experimental-vm-modules
      - run: |
          if [ ! -f Server/coverage/coverage-summary.json ]; then
            echo "❌ Coverage file not found!"
            exit 1
          fi
          COVERAGE=$(jq '.total.lines.pct' Server/coverage/coverage-summary.json)
          echo "Coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "❌ Coverage is below 80%!"
            exit 1
          fi

  build:
    name: Build (Frontend)
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: client/node_modules
          key: frontend-${{ hashFiles('client/package-lock.json') }}
      - uses: actions/setup-node@v3
        with:
          node-version: '20'
      - run: cd client && npm install && npm run build

  build-and-deploy:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
      - name: Clean old Docker resources
        run: |
          docker container prune -f
          docker image prune -af
          docker volume prune -f
          docker network prune -f
          docker system prune -af --volumes
      - name: Build frontend image
        run: |
          cd client
          docker build -t ${{ secrets.DOCKER_USERNAME }}/frontend:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/frontend:latest
      - name: Build backend image
        run: |
          cd Server
          docker build -t ${{ secrets.DOCKER_USERNAME }}/backend:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/backend:latest

  deploy:
    name: Deploy on EC2
    runs-on: self-hosted
    needs: build-and-deploy
    steps:
      - run: |
          cd /home/ubuntu/actions-runner/_work/cicdgithub
          docker-compose down --remove-orphans
          docker-compose pull
          docker-compose up -d
          docker system prune -af --volumes
